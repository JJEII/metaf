~~																															
~~		METa Alternate Format																					Created by	
~~			  REFERENCE																							 Eskarina	
~~																															

~~									
~~	TABLE OF CONTENTS:				
~~									
~~		1. QUICK REFERENCE			
~~		2. FULL REFERENCE			
~~		3. VIRINDITANK FUNCTIONS	
~~		4. UTILITYBELT FUNCTIONS	
~~									

~~ 																															
~~ 1. QUICK REFERENCE																										
~~ 																															

	~~ Data-type abbreviations:		
		i - Integer. A whole number.
		h - Integer expressed in Hexidecimal.
		d - Double. A decimal number.
		s - String. A chain of arbitrary characters inside braces { }. Can't contain braces, unless doubled.
		r - RegEx. Same as S, but expected to be a Regular Expression.
		l - Literal. A chain of characters beginning with a letter or underscore, followed by zero or more letters,
			underscores, or digits. Note: cannot contain any whitespace.
		p - Operation (Condition or Action).

	~~ STATE, RULE					
				 STATE: - Input: s Name, Rule+ (indirectly). A state name, distinct from all other state names. Every state
						  must contain at least one Rule (IF-DO pair).
					IF: - Input: p Condition. Condition may be any type (including Any/All, which may contain more inside).
						  Every Condition (IF) must be followed by an Action (DO).
					DO: - Input: p Action. Action may be any type (including DoAll, which may contain more inside).

	~~ CONDITION operations (IF:)	
				  Never - Input: none. False. (Never do the Action.)
				 Always - Input: none. True. (Always do the Action.)
					All - Input: p* Conditions (none directly). Contains >=0 Condition operations inside it. True if All of
						  them are true. (Empty-All is true; Not empty-All is false.)
					Any - Input: p* Conditions (none directly). Contains >=0 Condition operations inside it. True if Any of
						  them are true. (Empty-Any is false; Not empty-Any is true.)
			  ChatMatch - Input: r Pattern. True if Pattern matches a ChatWindow string.
			MainSlotsLE - Input: i Count. True if number of slots remaining empty in your inventory's main pack <= Count.
		  SecsInStateGE - Input: i Seconds. True if time since meta entered this state >= Seconds. (Timer RESETS if meta
						  turned off/on.)
			   NavEmpty - Input: none. True if the current navroute is empty.
				  Death - Input: none. True if character death is detected.
			 VendorOpen - Input: none. True when any vendor window is opened. !!! check exact functionality
		   VendorClosed - Input: none. True when a vendor window is closed. !!! check exact functionality
			ItemCountLE - Input: i Count, s Item name. True if number of Item in your inventory <= Count.
			ItemCountGE - Input: i Count, s Item name. True if number of Item in your inventory >= Count.
		MobsInDist_Name - Input: i Count, d Distance, r monster Name. True if number of Name within Distance >= Count.
	MobsInDist_Priority - Input: i Count, d Distance, i monster Priority. True if number of monsters of exact-Priority
						  within Distance >= Count.
			 NeedToBuff - Input: none. True if VTank's evaluated settings determine you need to buff.
		   NoMobsInDist - Input: d Distance. True if no monsters (>-1??) are within Distance of character. !!! test
				 BlockE - Input: h Landblock (expressed in hexidecimal). True if character's current landblock matches.
				  CellE - Input: h Landcell (expressed in hexidecimal). True if character's current landcell matches.
			 IntoPortal - Input: none. True upon entering portalspace.
			 ExitPortal - Input: none. True upon exiting portalspace.
					Not - Input: p Condition. Logically inverts any single Condition operation (including All/Any (empty or
						  not), as well as another Not). True if that operation is false.
		 PSecsInStateGE - Input: i Seconds. True if time since meta entered this state >= Seconds. (Timer CONTINUES if meta
						  turned off/on. P=Persistent.)
		  SecsOnSpellGE - Input: i Seconds, i SpellID(?). True if time remaining on spell with SpellID >= Seconds.
			BuPercentGE - Input: i Percent burden. True if character's burden >= Percent.
			DistToRteGE - Input: d Distance. True if character's shortest distance to currently loaded navroute >= Distance.
				   Expr - Input: s VTank 'code Expression'. True when executing Expression evaluates to true.
			ChatCapture - Input: r Pattern, s Color id list. True if ChatWindow message matches Pattern and Color. 'Captures'
						  regex groups in named variables.

	~~ ACTION operations (DO:)		
				   None - Input: none. Do nothing.
			   SetState - Input: s meta State name. Transition to State.
				   Chat - Input: s Text. Input the Text into the ChatWindow. (@t messages, execute vt commands, @e, etc.)
				  DoAll - Input: p* Actions (none directly). Contains >=0 Action operations inside it, allowing multiple
						  Actions to be associated with a single Condition.
			   EmbedNav - Input: s Tag, s Name, optional s Transform. Tag is a just a handle for a nav listed in the file's
						  bottom section; Name shows as the embedded nav's name in-game. See EmbedNav in Section 7 for more
						  on optional Transform input.
			  CallState - Input: s 'GoTo state name', s 'ReturnTo state name'. Transitions to GoTo state, placing ReturnTo
						  state on stack (set-up for use by a later Return operation).
				 Return - Input: none. Pops state from top of 'return to' stack and transitions to that state.
				 DoExpr - Input: s 'code Expression'. Executes the Expression as 'action code'.
			   ChatExpr - Input: s Text. Text is a hybrid; it first evaluates as an expression, then is input to ChatWindow.
						  Enables variable inputs to chat commands.
			SetWatchdog - Input: d Distance, d Seconds, s State name. In a state, if character hasn't moved >=Distance for
						  Seconds of time, call State.
		  ClearWatchdog - Input: none. Clears watchdog for this state.
				 GetOpt - Input: s VTank Option, s Variable name. Gets current value of Option and saves it in Variable.
				 SetOpt - Input: s VTank Option, s Expression. Sets Option based upon result of evaluating Expression.
			 CreateView - Input: s View, s XML. Creates a view View, with characteristics defined in XML. Note: the XML
						  must not contain newlines. Just like VirindiTank requires, so does metaf. (The XML must all be
						  on the same line as its CreateView operation.) See CreateView in Section 7 for support info for
						  external XML files and the internal View format. 
			DestroyView - Input: s View. Destroys the designated View.
		DestroyAllViews - Input: none. Destroys all existing Virindi Views for this meta.

	~~ NAV TYPES (NAV:)				
				   NAV: - Input: l Tag, l Type. Tag is distinct from all other nav tags. Type is one of the following:
				   circular - A navroute that infinitely repeats itself by looping back to the start when it hits the end.
					 linear - A navroute that infinitely repeats itself by alternatingly running it forward and backward.
					 follow - A navroute that is a single node in length (see below), to chase a specified player.
					   once - A navroute that does not repeat. Nodes are consumed (disappear) when they are reached.
					Every nav is listed in the nav section, which appear below the code listing section.

	~~ NAV NODE FORMATS				
				 Follow - flw   h Target GUID   {s Target Name}
				  Point - pnt   d X   d Y   d Z
				 Portal - prt   d X   d Y   d Z   h Portal GUID   [This type is DEPRECATED in VTank. Use 'ptl' instead.]
		   Recall Spell - rcl   d X   d Y   d Z   {s Full Name of Recall Spell}
				  Pause - pau   d X   d Y   d Z   d Pause (in ms)
		ChatField (any) - cht   d X   d Y   d Z   {s ChatInput}
			 Use Vendor - vnd   d X   d Y   d Z   h Target GUID   {s Target Name}
		 Use Portal/NPC - ptl   d X   d Y   d Z   d TargetX   d TargetY   d TargetZ   i Target ObjectClass   {s Target Name}
		    Talk to NPC - tlk   d X   d Y   d Z   d TargetX   d TargetY   d TargetZ   i Target ObjectClass   {s Target Name}
		 Nav Checkpoint - chk   d X   d Y   d Z
			   Nav Jump - jmp   d X   d Y   d Z   d HeadingInDegrees   {s HoldShift (True|False)}   d Delay (in ms)


	~~ VIEW Options (VIEW:)
			       VIEW: - Input: l Tag.  Tag is distinct from all other View tags

	~~ VIEW Options (VIEW:)				
					~~ All elements				
				    top - (int)Y value of top left corner
				   left - (int)X value of top left corner
			      width - (int)Width of the element
			     height - (int)Height of the element
					~~ View elements				
			      title - (string)Title of the view
					~~ Button elements				
			       name - (string) name
	     		   text - (string) text
	  	       setstate - (string) State to swtich too
		      actionexp - (string) Expression to run
					~~ None vTank options(all elements, cascades)				
			    hmargin - (int) Horizontal Margin
			    vmargin - (int) Vertical Margin
			       auto - (bool) Enable Auto layout
		       minwidth - (int) Min width of buttons
					
					
					
					




~~																															
~~ 2. FULL REFERENCE																										
~~																															

	~~ Miscellanous																											
		
		A couple things in this document, not explained elsewhere:
			GUID -  Globally Unique Identifier; it's an integer the game uses to reference every object uniquely. (Every
					object has a different number from every other object.) It is expressed in hexidecimal format, just like
					landblocks and landcells.
			ObjectClass - This is an integer that specifies a general 'object type' (e.g., Portal, NPC, etc.) See here for
					more: http://www.virindi.net/wiki/index.php/Meta_Expressions#Object_Properties

	~~ Datatype abbreviations																								

		i - Integer. A whole number.
		h - Integer expressed in Hexidecimal.
		d - Double. A decimal number.
		s - String. A chain of arbitrary characters inside braces { }. Can't contain braces, unless doubled.
		r - RegEx. Same as S, but expected to be a Regular Expression.
		l - Literal. A chain of characters beginning with a letter or underscore, followed by zero or more letters,
			underscores, or digits. Note: cannot contain any whitespace.
		p - An Operation (Condition or Action).

	~~ STATE, RULE																											

		STATE:   {s Name}   (Rule+ indirectly)
				IN-GAME: drop-down menu (or "New State..." button) at left near top when creating a new Rule.
				DETAILS: Two inputs, one direct (on the same line) and one indirect (on subsequent lines). The direct input,
				Name, declares this state's name and must be distinct from all other state names. The indirect input, Rule+,
				indicates that every state must contain at least one Rule (IF-DO pair) on the following lines.
				EXAMPLE: STATE: {Hello, world.}
							IF: Never
								DO: None
						--> Defines a state named 'Hello, world.' containing a single rule (IF-DO pair) that does nothing.
						
		IF:   p Condition
				IN-GAME: generally references the operations in the pane on left side.
				DETAILS: One input. Condition may be any type (including Any/All, which may contain more inside). Every
				Condition (IF) must be followed by an Action (DO).
				EXAMPLE: IF: Any
								Always
						--> Defines a Condition containing an Any operation (which itself contains an Always operation).

		DO:   p Action
				IN-GAME: generally references the operations in the pane on right side.
				DETAILS: One input. Action may be any type (including DoAll, which may contain more inside).
				EXAMPLE: DO: DoAll
								EmbedNav MyFavorite follow
						--> Defines an Action containing a DoAll operation (which itself contains an EmbedNav operation).

	~~ CONDITION operations (IF:)																							

		All   (none directly)
				IN-GAME: "All" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No direct inputs (on the same line) but does wrap zero or more Condition operations inside it (on
				following lines, tabbed in one more time). True if all directly-wrapped operations are True. (Empty-All is
				true; Not empty-All is false.) Do not confuse this with the Action DoAll.
				EXAMPLE: All
							Never
							Always
						 --> The All evaluates to False because not all the operations inside it
							 evaluate to True. (Never evaluates to False.)

		Always   (none)
				IN-GAME: "Always" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True always. (Always do the corresponding Action.)
				EXAMPLE: Always
						 --> Always is True. (Always True.)

		Any   (none directly)
				IN-GAME: "Any" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No direct inputs (on the same line) but does wrap zero or more Condition operations inside it (on
				following lines, tabbed in one more time). True if any directly-wrapped operations are True. (Empty-Any is
				false; Not empty-Any is true.)
				EXAMPLE: Any
							Never
							Always
						 --> The Any evaluates to True because at least one operation inside it evaluates to True. (Always
							 evaluates to True.)

		BlockE   h Landblock
				IN-GAME: "Landblock ==" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if character location is currently in Landblock.
				EXAMPLE: BlockE 8B370000
						 --> True if leading 4 'digits' of character's @loc match leading 4 'digits'.

		BuPercentGE   i Burden
				IN-GAME: "Burden Percent >=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if character burden percent is >= Burden.
				EXAMPLE: BuPercentGE 110
						 --> True if character burden is >= 110%.

		CellE   h Landcell
				IN-GAME: "Landcell ==" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if character location is currently in Landcell.
				EXAMPLE: CellE 8B37E3A1
						 --> True if all 8 'digits' of character's @loc match all 8 'digits'.

		ChatCapture   {r Pattern}   {s ColorIdList}
				IN-GAME: "Chat Message Capture" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: Two inputs. True if both Pattern matches a ChatWindow message and that message's color is in the
						 ColorIdList. (Empty fields for either/both count as a match for that field.) Used to 'capture' text
						 into internal variables, which are given the names designated within Pattern with capturegroup_
						 concatenated as a prefix. The message color is in variable capturecolor, and the list is specified
						 as semicolon-separated numbers. See: http://www.virindi.net/wiki/index.php/Virindi_Chat_System_5
						 NOTE: It does not appear to actually be color IDs, but rather the various ChatWindow message type
						 IDs. (I matched to General and Trade, then changed their colors, and they still matched.)
								Colors I've discovered so far (personally, and with '/ub printcolors'):
									Type			Example			ID				Type			Example			ID
									Broadcast		EnemyDeath		0				Appraisal		?				?
									?				?				?				Spellcasting	AnyMagicCast	17
									Speech			Say				2				Allegiance		AllegianceChat	18
									Tell			YouThink		3				Fellowship		FellowshipChat	19
									OutgoingTell	YouTell			4				WorldBroadcast	Aerfalle?		20
									System			ServerRestart?	5				CombatEnemy		YouEvade/HitBy	21
									Combat			HoT/Surge		6				CombatSelf		Enemy ''/ ''	22
									Magic			YouResist/HitBy	7				Recall			@hom			23
									Channel			?				8				Craft			TinkerApplied	24
									ChannelSend		?				9				Salvaging		AnySalvaging	25
									Social			?				10				?				?				?
									SocialSend		?				11				General			GeneralChat		27
									Emote			AnyEmote		12				Trade			TradeChat		28
									Advancement		LevelUp?		13				LFG				LFGChat?		29
									Abuse			?				14				Roleplay		RoleplayChat?	30
									Help			?				15				AdminTell		?				31
																					Olthoi			?				32
				EXAMPLE: ChatCapture {^.*(?<who>Eskarina).* (says|tells you), \".+\"$} {2;4}
						--> When True:	Variable capturegroup_who holds string 'Eskarina';
									 	Variable capturecolor holds matched-message's colorID.

		ChatMatch   {r Pattern}
				IN-GAME: "Chat Message" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if Pattern regex matches a ChatWindow message. (Matches any message if empty.)
				EXAMPLE: ChatMatch {^.*Eskarina.* (says|tells you), \".+\"$}
						 --> Simply detects a regex match in the ChatWindow. Does not capture anything.

		Death   (none)
				IN-GAME: "Character Death" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True if character death detected.
				EXAMPLE: Death
						 --> Triggered on character death.

		DistToRteGE   d Distance
				IN-GAME: "Dist any route pt >=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if character's shortest-distance to current navroute is >= Distance (in yards).
				EXAMPLE: DistToRteGE
						 --> True when character exceeds  distance from current navroute.

		ExitPortal   (none)
				IN-GAME: "Portalspace Exited" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True upon exiting portalspace.
				EXAMPLE: ExitPortal
						 --> True when character leaves portalspace.

		Expr   {s Code}
				IN-GAME: "Expression" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if Code evaluates to True. Do not confuse this with the Action DoExpr.
				EXAMPLE: Expr {7==getobjectinternaltype[getvar[myvar]]}
						 --> True if variable myvar is an object type.
						(See: http://www.virindi.net/wiki/index.php/Meta_Expressions#Function_Information )

		IntoPortal   (none)
				IN-GAME: "Portalspace Entered" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True upon entering portalspace.
				EXAMPLE: IntoPortal
						 --> True when character enters portalspace.

		ItemCountGE   i Count   {s Item}
				IN-GAME: "Inventory Item Count >=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: Two inputs. True if number of Item in inventory is >= Count. Is not a regex.
				EXAMPLE: ItemCountGE 25 {Prismatic Taper}
						 --> True when Prismatic Taper supply in inventory is >= 25.

		ItemCountLE   i Count   {s Item}
				IN-GAME: "Inventory Item Count <=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: Two inputs. True if number of Item in inventory is <= Count. Is not a regex.
				EXAMPLE: ItemCountLE 25 {Prismatic Taper}
						 --> True when Prismatic Taper supply in inventory is <= 25. (Uh-oh!)

		MainSlotsLE   i Count
				IN-GAME: "Pack Slots <=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if number of empty slots remaining in character's main pack
				inventory is <= Count.
				EXAMPLE: MainSlotsLE 7
						 --> True when <=7 inventory slots remain empty in character's main pack.

		MobsInDist_Name   i Count   d Distance   {r Name}
				IN-GAME: "Monster Name Count Within Distance" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: Three inputs. True if number of (regex-match) monster Name within Distance is >= Count. Completely
				ignores monster priority (including if it's -1).
				EXAMPLE: MobsInDist_Name 5 13.7 {Drudge Lurker}
						 --> True when >=5 Drudge Lurkers are within 13.7 yards of character.

		MobsInDist_Priority   i Count   d Distance   i Priority
				IN-GAME: "Monster Priority Count Within Distance" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: Three inputs. True if number of exact-Priority monsters within Distance is >= Count.
				EXAMPLE: MobsInDist_Priority 6 4.7 2
						 --> True when >=6 monsters of priority >=2 are within 4.7 yards of character.

		NavEmpty   (none)
				IN-GAME: "Navroute empty" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True if current navroute is empty.
				EXAMPLE: NavEmpty
						 --> True when the current navroute is empty.

		NeedToBuff   (none)
				IN-GAME: "Need to Buff" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True if VTank's settings determine character needs to buff.
				EXAMPLE: NeedToBuff
						 --> True when VTank's settings determine the character requires buffing.

		Never   (none)
				IN-GAME: "Never" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. Never True. (Never do the corresponding Action.)
				EXAMPLE: Never
						 --> Never is False. (Never True.)

		NoMobsInDist   d Distance
				IN-GAME: "No Monsters Within Distance" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if there are no monsters within Distance of character. Ignores Priority entirely.
				EXAMPLE: NoMobsInDist 20.6
						 --> True when no mobs are within 20.6 yards of character.

		Not   p Condition
				IN-GAME: "Not" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if Condition operation is False. (May be All or Any.)
				EXAMPLE: Not All
							Always
							Never
						 --> The Not is True because it inverts the All, which is False.

		PSecsInStateGE   i Seconds
				IN-GAME: "Seconds in state (P) >=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if time elapsed since entering current state >= Seconds.
				Persistent timer; does not reset if meta is stopped/started.
				EXAMPLE: PSecsInStateGE 15
						 --> True 15 seconds after entering (and staying in) the rule's state, whether or not the meta's
							 execution is turned off/on.

		SecsInStateGE   i Seconds
				IN-GAME: "Seconds in state >=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: One input. True if time elapsed since entering current state >= Seconds. Resets timer if meta is
				stopped/started.
				EXAMPLE: SecsInStateGE 12
						 --> True 12 seconds after entering (and staying in) the rule's state, so long as the meta has
							 been running the whole time. (It resets the timer counter to zero if the meta is turned off
							 and back on, as if it's just entered the state.)
				
		SecsOnSpellGE   i Seconds   i SpellID
				IN-GAME: "Time Left On Spell >=" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: Two inputs. True if time remaining on spell with SpellID is >= Seconds.
				EXAMPLE: SecsOnSpellGE 120 4291
						 --> True if >=120 seconds remain on 'Incantation of Armor Self', which has a SpellID of 4291.
							 (Execute a '/vt dumpspells' command in-game. The far left column of the file it creates is the
							 SpellID column.)
				
		VendorOpen   (none)
				IN-GAME: "Any Vendor Open" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True when any vendor window is opened.
				EXAMPLE: VendorOpen
						 --> True if any vendor window is open.

		VendorClosed   (none)
				IN-GAME: "Vendor Closed" on Condition drop-down menu (top left when defining a Rule).
				DETAILS: No inputs. True when a vendor window is closed.
				EXAMPLE: VendorClosed
						 --> True when vendor window is closed.

	~~ ACTION operations (DO:)																								

		CallState   {s ToState}   {s ReturnState}
				IN-GAME: "Call Meta State" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Two inputs. Transitions to state ToState, placing ReturnState on the 'call stack' in order to
				remember where to go when ready to return. (See: Return.) Keep CallState and Return in careful balance.
				EXAMPLE: CallState {Do Something} {Done With Something}
						 --> Sets state to state 'Do Something', pushing 'Done With Something' onto the call stack, for later
							 popping, to 'return'.

		Chat   {s Text}
				IN-GAME: "Chat Command" on Action drop-down menu (top right when defining a Rule).
				DETAILS: One input. 'Send' Text as Chat. Do not confuse this with the Action ChatExpr.
				EXAMPLE: Chat {/vt jump 137 true 648}
						 --> The text is entered into and 'sent' to the ChatWindow, causing VTank to turn your character to
							 face a heading of 137 degrees, and then shift-jump after 'holding space' for 648 milliseconds.

		ChatExpr   {s ChatCode}
				IN-GAME: "Chat Expression" on Action drop-down menu (top right when defining a Rule).
				DETAILS: One input. Evaluates ChatCode as a 'code', then 'sends' it to ChatWindow. Do not confuse this with
				the Action Chat.
				EXAMPLE: ChatExpr {\/t +getcharstringprop[1]+\, Hi\!}
						 --> Character @tells itself, 'Hi!'

		DoAll   (none directly)
				IN-GAME: "All" on Action drop-down menu (top right when defining a Rule).
				DETAILS: No direct inputs (on the same line) but does wrap zero or more Action operations inside it (on
				following lines, tabbed in one more time). Do not confuse with Condition All.
				EXAMPLE: DoAll
							Chat {/t Eskarina, Hi!}
							Chat {*dance*}
						 --> Sends Eskarina a direct message of 'Hi!', then emote-dances.

		DoExpr   {s Code}
				IN-GAME: "Expression Action" on Action drop-down menu (top right when defining a Rule).
				DETAILS: One input. Executes Code. Do not confuse this with the Condition Expr, or the Action ChatExpr.
				EXAMPLE: DoExpr {setvar[mycoords,getplayercoordinates[]]}
						 --> Sets variable mycoords to character's current coordinates (coordinate object).

		EmbedNav   l Tag   {s Name} {s Transform (optional)}
				IN-GAME: "Load Embedded Nav Route" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Two inputs (or three). Tag is only used as a 'handle' to reference a navroute in the list of navs at
				the bottom of a metaf file, where it is marked with the same Tag. Name is the name displayed in-game, when
				you examine the embedded name in the meta. Note that Tag can be anything you want it to be, so long as it's a
				valid literal and is distinct from all other nav tags. (There's no reason it needs to be nav## in
				format; it could just as easily be OlthoiMatronHive instead.) The optional Transform input is a string
				containing seven doubles, separated by spaces: {a b c d e f g}, where
							New			  Old
							[x]	  [a b 0] [x]   [e]
							[y] = [c d 0] [y] + {f]
							[z]	  [0 0 1] [z]   [g].
				Every nav node with coordinates in it gets transformed accordingly during conversion into .met. The default
				transformation is {1 0 0 1 0 0 0}, which leaves points unchanged.
				EXAMPLE (REAL):	STATE: {Hive120}
									IF:	Never
										DO:	EmbedNav navH120 {H120}
								STATE: {Hive90}
									IF:	Never
										DO:	EmbedNav navH120 {H90} {1 0 0 1 0 -0.8 0}
						 --> The first EmbedNav (two inputs) references a complicated nav tagged as navH120, defined in the
							 nav section at the bottom of the file, and named 'H120' where it's embedded in the code. It
							 was created in Matron Hive East (120+), and it gets transformed with the default transform
							 when being converted into .met. The second EmbedNav (three inputs) references the same nav
							 as the first (still navH120), but two important differences happen here when converting into
							 .met: first, this nav gets named 'H90' where it's embedded in the code, and second, that third
							 input gets applied as a transform to all the nav nodes. That is the correct transform to put
							 it exactly in the same relative placement within Matron Hive West (90+) as it was in Matron
							 Hive East (120+). And, that's it. Those seven numbers created an entirely new nav.
							 In case you're wondering: South(40+) is {1 0 0 1 1.6 0 0} and North(60+) is {1 0 0 1 1.6 0.8 0}.

		None   (none)
				IN-GAME: "None" on Action drop-down menu (top right when defining a Rule).
				DETAILS: No inputs. Do nothing. (Action: None.)
				EXAMPLE: None
						 --> Nothing happens.

		Return   (none directly)
				IN-GAME: "Return From Call" on Action drop-down menu (top right when defining a Rule).
				DETAILS: No direct inputs but does expect a state to be on the 'call stack' because it needs to pop a
				state from the stack in order to transition the meta to whatever that state is. (See CallState.) Keep
				CallState and Return in careful balance.
				EXAMPLE: CallState {Do Something} {Done With Something}
						 --> Sets state to state 'Do Something', pushing 'Done With Something' onto
							 the call stack, for later popping, to 'return'.

		SetState   {s Name}
				IN-GAME: "Set Meta State" on Action drop-down menu (top right when defining a Rule).
				DETAILS: One input. Set current state to state Name.
				EXAMPLE: SetState {Target Name}
						 --> Meta transitions to state 'Target Name'.

		SetWatchdog   d Distance   d Seconds   {s State name}
				IN-GAME: "Set Watchdog" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Three inputs. You can set a watchdog in a state that is triggered if at any time while in that
				state your character has not moved >=Distance over the preceding Seconds of time. If triggered, State is
				called. (Returning from it, re-enters the original state.)
				EXAMPLE: SetWatchdog 12.3 4.6 {Oh, no!}
						--> If at some point while in the current state your character hasn't moved at least 12.3 yards in
							the preceding 4.6 seconds, state 'Oh, no!' is called.

		ClearWatchdog   (none)
				IN-GAME: "Clear Watchdog" on Action drop-down menu (top right when defining a Rule).
				DETAILS: No inputs. Clears the watchdog for the current state.
				EXAMPLE: ClearWatchdog
						--> Clears (gets rid of) the current watchdog in this state (if any).

		GetOpt   {s Option}   {s Variable}
				IN-GAME: "Get VT Option" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Two inputs. Gets the current value of the VirindiTank Option and saves it in Variable.
				EXAMPLE: GetOpt {OpenDoors} {doors}
						--> Gets current status of the 'OpenDoors' VirindiTank option, and stores it in variable 'doors'.

		SetOpt   {s Option}   {s Expression}
				IN-GAME: "Set VT Option" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Two inputs. Sets the VirindiTank Option based upon the results of evaluating Expression.
				EXAMPLE: SetOpt {OpenDoors} {istrue[wobjectfindnearestdoor[]]}
						--> Sets the VirindiTank 'OpenDoors' option to true if any doors are nearby, false otherwise.

		CreateView   {s view Handle}   {s XML}
				IN-GAME: "Create View" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Creates a Virindi View with the designated Handle, the layout of which is defined by XML. The XML
				must be on a single line (no line breaks). If the first character in input XML is ':', the remainder is
				treated as a reference to an external XML file, which metaf flattens into a single line and treats as if
				it's the XML input string instead of the file-reference (meaning the same input-string restrictions apply
				with regard to metaf string delimiters). ---- Are other controls (etc.) recognized? I don't know. For a
				bit more, see: http://www.virindi.net/wiki/index.php/Meta_Views
				EXAMPLE: CreateView {myview} {<?xml version="1.0"?><view width="300" height="200" title="My View"><control type="layout"><control type="button" name="btnA1" left="20" top="10" width="50" height="20" text="B1" actionexpr="chatbox[\/vt echo B\1\!]" setstate="st"/></control></view>}
						--> Creates new Virindi View with handle 'myview' that makes a 300x200 window with title 'My View',
							and one 50x20 button with 'B1' text on it, at (20,10). Pressing it sets the state to 'st', and
							evaluates the expression 'chatbox[\/vt echo B1\!]'.
				EXAMPLE2: CreateView {myview} {:myview.xml}
						--> Assuming myview.xml contains the same XML as above (whether split across multiple lines or not),
						    this does exactly the same thing as above.
				EXAMPLE3: CreateView {myview} {myview}
						--> Assuming myview is a defined view tag
				
							
		DestroyView   {s View}
				IN-GAME: "Destroy View" on Action drop-down menu (top right when defining a Rule).
				DETAILS: Destroy the designated View.
				EXAMPLE: DestroyView {myview}
						--> Destroys the Virindi View with handle 'myview'.
						
		DestroyAllViews   (none)
				IN-GAME: "Destroy All Views" on Action drop-down menu (top right when defining a Rule).
				DETAILS: No inputs. Destroys all views for this meta.
				EXAMPLE: DestroyAllViews
						--> Destroys any views that exist for this meta.

	~~ NAV TYPES (NAV:)																										

		NAV:   l Tag   l Type
				IN-GAME: Route tab. (Select Type from drop-down menu at bottom left.)
				DETAILS: Two inputs. Tag is only used as a 'handle' to uniquely identify a nav  as distinct from all other
				navs in the nav listing. Type is what type of nav it is. (See below.) Note that Tag can be anything you want
				it to be, so long as it's a valid literal and is distinct from all other nav tags. (There's no reason it
				needs to be nav## in format; it could just as easily be OlthoiMatronHive instead.)
				   circular - A navroute that infinitely repeats itself by looping back to the start when it hits the end.
					 linear - A navroute that infinitely repeats itself by alternatingly running it forward and backward.
					 follow - A navroute that is a single node in length (see below), to chase a specified player.
					   once - A navroute that does not repeat. Nodes are consumed (disappear) when they are reached.
				EXAMPLE: NAV: ToMyXPPlace once
							(Zero or more nav nodes appear on immediately following lines, tabbed in one time.)
						 --> Creates a navroute of type Once that is cited by meta code via the tag ToMyXPPlace.

	~~ NAV NODE FORMATS																										

				 Follow - flw   h Target GUID   {s Target Name}
							IN-GAME: Select another player; click "FC" (Follow Character) on mini-remote.
				  Point - pnt   d X   d Y   d Z
							IN-GAME: Route tab. "Add" button, at top, near right.
							Colored more lightly because plain points tend to be 'the movement between the action'.
				 Portal - prt   d X   d Y   d Z   h Portal GUID
							IN-GAME: Unavailable. (DEPRECATED in VTank.)
		   Recall Spell - rcl   d X   d Y   d Z   {s Full Name of Recall Spell}
							IN-GAME: Route tab. "Add Recall" button with drop-down menu to right of it, in middle.
							Recognized Full Recall Spell Names are, exactly:
								{Primary Portal Recall}					{Paradox-touched Olthoi Infested Area Recall}
								{Secondary Portal Recall}				{Call of the Mhoire Forge}
								{Lifestone Recall}						{Colosseum Recall}
								{Lifestone Sending}						{Facility Hub Recall}
								{Portal Recall}							{Gear Knight Invasion Area Camp Recall}
								{Recall Aphus Lassel}					{Lost City of Neftet Recall}
								{Recall the Sanctuary}					{Return to the Keep}
								{Recall to the Singularity Caul}		{Rynthid Recall}
								{Glenden Wood Recall}					{Viridian Rise Recall}
								{Aerlinthe Recall}						{Viridian Rise Great Tree Recall}
								{Mount Lethe Recall}					{Celestial Hand Stronghold Recall}
								{Ulgrim's Recall}						{Radiant Blood Stronghold Recall}
								{Bur Recall}							{Eldrytch Web Stronghold Recall}
				  Pause - pau   d X   d Y   d Z   d Pause (in ms)
							IN-GAME: Route tab. "Add Pause" button with 'seconds' text field to right of it, near bottom.
		ChatField (any) - cht   d X   d Y   d Z   {s ChatInput}
							IN-GAME: Route tab. "Add Chat" button with text field to right of it, at bottom right.
			 Use Vendor - vnd   d X   d Y   d Z   h Target GUID   {s Target Name}
							IN-GAME: Route tab. "Open Vendor" button at top right.
		 Use Portal/NPC - ptl   d X   d Y   d Z   d TargetX   d TargetY   d TargetZ   i Target ObjectClass   {s Target Name}
							IN-GAME: Route tab. "Use Portal/NPC" button, near top, near right.
							Allowed ObjectClass: 14 (Portal), 37 (NPC), 10 (Container, e.g., 'Dangerous Portal Device').
		    Talk to NPC - tlk   d X   d Y   d Z   d TargetX   d TargetY   d TargetZ   i Target ObjectClass   {s Target Name}
							IN-GAME: Route tab. "Add NPC Talk" button, near top, on right.
							Allowed ObjectClass: 37 (NPC).
		 Nav Checkpoint - chk   d X   d Y   d Z
							IN-GAME: Entered via chat command: /vt addnavcheckpoint
									 http://www.virindi.net/wiki/index.php/Virindi_Tank_Commands
			   Nav Jump - jmp   d X   d Y   d Z   d HeadingInDegrees   {s HoldShift (True|False)}   d Delay (in ms)
							IN-GAME: Entered via chat command: /vt addnavjump [heading] [shift: true or false] [milliseconds]
									 http://www.virindi.net/wiki/index.php/Virindi_Tank_Commands

~~																															
~~ 3. VIRINDITANK FUNCTIONS					http://www.virindi.net/wiki/index.php/Meta_Expressions#Function_Information		
~~																															

	~~ Data-type abbreviations:		
		i - Integer. A whole number.
		d - Double. A decimal number.
		s - String. A chain of arbitrary characters inside braces { }. Can't contain braces, unless doubled.
		r - RegEx. Same as S, but expected to be a Regular Expression.
		c - Coordinates. A coordinates object.
	   dr - Door. A door object.
	   sw - Stopwatch. A stopwatch object.
	   wo - World Object. An in-game world object.
		o - Object. A general object datatype.

	~~ VARIABLES																											
		testvar[s]					touchvar[s]
		getvar[s]					clearallvars[]
		setvar[s,o]					clearvar[s]
		
	~~ CHARACTER   			Character properties http://www.virindi.net/wiki/index.php/Meta_Expressions#Object_Properties	
		getcharintprop[i]				wobjectgetplayer[]						getplayerlandcell[]
		getchardoubleprop[i]			getplayercoordinates[]					getcharvital_base[i] (1=H,2=S,3=M)
		getcharboolprop[i]				getcharskill_base[i]					getcharvital_current[i] (1=H,2=S,3=M)
		getcharquadprop[i]				getcharskill_buffed[i]					getcharvital_buffedmax[i] (1=H,2=S,3=M)
		getcharstringprop[i]			getcharskill_traininglevel[i] (returns: 0=Unuse,1=Untrain,2=Train,3=Spec)
		
	~~ CASTING   '/vt dumpspells'  http://www.virindi.net/wiki/index.php/Virindi_Tank_Commands#.2Fvt_commands_-_Game_Info	
		getisspellknown[i]				getcancastspell_hunt[i]					getcancastspell_buff[i]
		actiontryequipanywand[]			actiontrycastbyid[i]					actiontrycastbyidontarget[i,o]
		
	~~ INVENTORY																											
		wobjectfindininventorybytemplatetype[i]
		wobjectfindininventorybyname[s]
		wobjectfindininventorybynamerx[r]
		
	~~ LOCATION																												
		getplayerlandcell[]					coordinategetns[c]				coordinatedistancewithz[c,c]
		getplayercoordinates[]				coordinategetwe[c]				coordinatedistanceflat[c,c]
		coordinatetostring[c]				coordinategetz[c]				wobjectgetphysicscoordinates[wo]
		coordinateparse[s]
		
	~~ OBJECT																												
		wobjectgetselection[]					wobjectgetname[o]
		wobjectgetplayer[]						wobjectgetphysicscoordinates[wo]
		wobjectfindnearestmonster[]				wobjectfindnearestbyobjectclass[i]
		wobjectfindnearestdoor[]				wobjectfindnearestbynameandobjectclass[i,r]
		wobjectgetisdooropen[dr]				wobjectfindininventorybyname[s]
		wobjectgetobjectclass[o]				wobjectfindininventorybynamerx[r]
		wobjectgettemplatetype[o]				wobjectfindininventorybytemplatetype[i]
		getobjectinternaltype[o]
		
	~~ ACTION																												
		actiontryselect[o]						actiontryequipanywand[]
		actiontryuseitem[o]						actiontrycastbyid[i]
		actiontrygiveitem[o,o tgt]				actiontrycastbyidontarget[i,o]
		actiontryapplyitem[o use,o tgt]
		
	~~ UI																													
		CHAT:			chatbox[s]								chatboxpaste[s]
		HUD, etc.:		statushud[s key,s val]					statushudcolored[s key,s val,s rgbInt]
						uigetcontrol[s window,s ctrl]			uisetlabel[o ctrl,s label]
						
	~~ LOGIC		Note: iif always evaluates both T and F clauses; it just returns only one of them.						
		iif[eval,retIfT,retIfF]			isfalse[o]				istrue[o]
		
	~~ NUMBER																												
		randint[i min,i max]					round[d]					coordinategetns[c]
		cstr[i]									abs[d]						coordinategetwe[c]
		cstrf[d,s format(probably G)]			getcharintprop[i]			coordinategetz[c]
		cnumber[s]								getchardoubleprop[i]
		floor[d]								getcharquadprop[i]
		ceiling[d]								getcharboolprop[i]
		
	~~ STRING																												
		cstr[i]									coordinatetostring[c]
		strlen[s]								coordinateparse[s]
		cstrf[d,s format(probably G)]			wobjectgetname[o]
		cnumber[s]								chatbox[s]
		
	~~ TIME																													
		stopwatchcreate[]						stopwatchstop[sw]
		stopwatchstart[sw]						stopwatchelapsedseconds[sw]
		
	~~ MISCELLANEOUS																										
		getobjectinternaltype[o]  (returns 0=none, 1=number, 3=string, 7=object)

~~																															
~~ 4. UTILITYBELT FUNCTIONS (non-VT-overlapping)							https://utilitybelt.gitlab.io/docs/expressions/	
~~																															
~~ 		NOTE: UtilityBelt independently implements all VirindiTank functions (see Section 3), plus the following functions.	
~~																															

	~~ Data-type abbreviations:		
		i - Integer. A whole number.
		d - Double. A decimal number.
	   ch - Character. A single character from a string.
		s - String. A chain of arbitrary characters inside braces { }. Can't contain braces, unless doubled.
		r - RegEx. Same as S, but expected to be a Regular Expression.
		D - Dictionary. An associative array, i.e., dictionary datatype.
		L - List. An array (equivalent) datatype.
		c - Coordinates. A coordinates object.
	   ui - UIControl. A UIControl object.
	   wo - World Object. An in-game world object.
		o - Object. An object datatype.

	~~ AVATAR+																												
		getworldname[]			getitemcountininventorybyname[s]
		getheading[wo]			getitemcountininventorybynamerx[r]
		getheadingto[wo]		actiontrygiveprofile[s lootprofile, s tgt]
		vitae[]

	~~ FELLOWSHIP																											
		getfellowshipstatus[]		getfellowshipname[]				getfellowshipisopen[]
		getfellowshipisleader[]		getfellowshipleaderid[]			getfellowshipcanrecruit[]
		getfellowid[i]				getfellowshipcount[]			getfellowshiplocked[]
		getfellowname[i]			getfellowshipisfull[]

	~~ MATH																													
		sin[d]		cos[d]		tan[d]		sqrt[d]
		asin[d]		acos[d]		atan[d]		atan2[d y,d x]
		sinh[d]		cosh[d]		tanh[d]

	~~ MISCELLANEOUS: META, STRING, CHARACTER																				
		vtsetmetastate[s]		getregexmatch[s,r]		echo[s msg,i color]		chr[i char]		ord[ch]

	~~ OBJECT																												
		wobjectgetid[wo]							wobjectgethealth[wo]
		wobjectfindbyid[i]							wobjectgetintprop[wo,i]
		wobjectfindnearestbytemplatetype[i]			wobjectgetopencontainer[]

	~~ QUEST																												
		testquestflag[s]				getquestktprogress[s]
		isrefreshingquests[]			getquestktrequired[s]
		getqueststatus[s]

	~~ TIME																													
		getisday[]						getgamehour[]			getgamehourname[i hourIndex]
		getisnight[]					getgameday[]			getgameticks[]
		getminutesuntilday[]			getgamemonth[]			getgamemonthname[i monthIndex]
		getminutesuntilnight[]			getgameyear[]

	~~ UI																													
		uisetvisible[ui ctrl, i visible]		uiviewvisible[s window]			uiviewexists[s window]
	
	~~ VARIABLES																											
		getgvar[s]			touchgvar[s]				getpvar[s]			touchpvar[s]
		setgvar[s,o]		cleargvar[s]				setpvar[s,o]		clearpvar[s]
		testgvar[s]			clearallgvars[]				testpvar[s]			clearallpvars[]

		~~ DICTIONARIES					
		dictgetitem[D,s key]		dictcreate[...items] (items=key,value pairs: k1,v1,k2,v2,...)
		dicthaskey[D,s key]			dictadditem[D,s key,o val]
		dictkeys[D]					dictremovekey[D,s key]
		dictvalues[D]				dictclear[D]
		dictsize[D]					dictcopy[D]

		~~ LISTS						
		listgetitem[L,i]			listpop[L,i=-1]			listcreate[...items] (items=values: v1,v2,v3,...)
		listcontains[L,o]			listremove[L,o]			listadd[L,o]
		listindexof[L,o]			listremoveat[L,i]		listinsert[L,o,i]
		listlastindexof[L,o]		listclear[L]			listcopy[L]
		listcount[L]										listreverse[L]

~~																															
~~		METa Alternate Format																					Created by	
~~			  REFERENCE																							 Eskarina	
~~																															
